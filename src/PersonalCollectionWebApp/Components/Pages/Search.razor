@attribute [Route(AppRouteSearch)]
@attribute [Authorize(Policy = PolicyUserNotBlockedOrAnonymous)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject CollectionService CollectionService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Search> locale

<PageTitle>@locale["Search items"]</PageTitle>

<MudTable T="Item" Items="@foundItems" Hover="true" Dense="true" OnRowClick="@NavigateToItemDetails" RowClass="cursor-pointer">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@locale["Found items"]</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x=>x.Name)">@locale["Name"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x=>x.Collection.Name)">@locale["Collection"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x=>x.Collection.User?.UserName)">@locale["Author"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x=>x.CreatedDate)">@locale["Added"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x=>x.Tags?.Count)">@locale["Tags"]</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Collection">@context.Collection.Name</MudTd>
        <MudTd DataLabel="Author">@context.Collection.User.UserName</MudTd>
        <MudTd DataLabel="Added">@context.CreatedDate.ToLocalTime()</MudTd>
        <MudTd DataLabel="Tags">@string.Join(", ", context.Tags.Select(t => t.Name))</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" RowsPerPageString=@locale["Rows per page"] />
    </PagerContent>
</MudTable>

@code {
    [SupplyParameterFromQuery]
    public string? SearchString { get; set; }

    [SupplyParameterFromQuery]
    public string? SearchTag { get; set; }

    private IEnumerable<Item> foundItems = [];

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            foundItems = await CollectionService.SearchItems(SearchString);
        }

        if (!string.IsNullOrEmpty(SearchTag))
        {
            foundItems = await CollectionService.SearchItemsByTag(SearchTag);
        }
    }

    private void NavigateToItemDetails(TableRowClickEventArgs<Item> args)
    {
        NavigationManager.NavigateTo($"/{NavItems}/{args.Item.Id}");
    }
}
