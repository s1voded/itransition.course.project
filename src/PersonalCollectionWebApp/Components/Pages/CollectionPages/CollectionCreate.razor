@attribute [Route(Constants.AppRouteCollectionCreate)]
@attribute [Authorize(Policy = Constants.PolicyUserNotBlocked)]
@rendermode InteractiveServer
@using System.Security.Claims
@using PersonalCollectionWebApp.Components.Shared
@inject NavigationManager NavigationManager
@inject CollectionService CollectionService
@inject IAuthorizationService AuthorizationService

<PageTitle>Collection create</PageTitle>
<MudText Typo="Typo.h5">Create new collection</MudText>

<MudDivider DividerType="DividerType.Middle" Class="my-2" />

<CollectionEditCreateComponent Collection="collection"
                               Themes="themes"
                               CustomFieldsSettings="customFieldsSettings"
                               OnSubmit="AddCollection" SubmitButtonText="Create">
</CollectionEditCreateComponent>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    public Collection collection = new();

    private IEnumerable<Theme> themes = [];

    private CustomFieldsSettings customFieldsSettings = new()
    {
            CustomStrings = GetInitCustomFields(Constants.CustomFieldsCount),
            CustomTexts = GetInitCustomFields(Constants.CustomFieldsCount),
            CustomInts = GetInitCustomFields(Constants.CustomFieldsCount),
            CustomBools = GetInitCustomFields(Constants.CustomFieldsCount),
            CustomDates = GetInitCustomFields(Constants.CustomFieldsCount),
    };

    private static List<CustomField> GetInitCustomFields(int count)
    {
        var customFieldsList = new List<CustomField>(count);
        for (int i = 0; i < count; i++)
        {
            customFieldsList.Add(new CustomField());
        }
        return customFieldsList;
    }

    protected override async Task OnInitializedAsync()
    {
        themes = await CollectionService.GetThemes();
    }

    public async Task AddCollection()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    collection.UserId = userId;
                    var isAuthorized = await AuthorizationService.AuthorizeAsync(user, collection, Constants.PolicyCanManageCollection);
                    if (isAuthorized.Succeeded)
                    {
                        collection.CustomFieldsSettings = customFieldsSettings;
                        await CollectionService.AddCollection(collection);
                        NavigationManager.NavigateTo($"/{Constants.NavCollections}");
                    }
                    else
                    {
                        NavigationManager.NavigateTo("/");
                    }
                }
            }
        }
    }
}
