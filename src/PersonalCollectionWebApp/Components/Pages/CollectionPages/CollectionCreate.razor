@attribute [Route(AppRouteCollectionCreate)]
@attribute [Authorize(Policy = PolicyUserNotBlocked)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject NavigationManager NavigationManager
@inject CollectionService CollectionService
@inject AuthService AuthService
@inject IStringLocalizer<CollectionCreate> locale

<PageTitle>@locale["Collection create"]</PageTitle>
<MudText Typo="Typo.h5">@locale["Create new collection"]</MudText>

<MudDivider DividerType="DividerType.Middle" Class="my-2" />

<CollectionEditCreateComponent 
    Collection=@collection
    Themes=@themes
    CustomFieldsSettings=@customFieldsSettings
    OnSubmit=@AddCollection
    SubmitButtonText=@locale["Create"]>
</CollectionEditCreateComponent>

@code {
    public Collection collection = new();
    private IEnumerable<Theme> themes = [];

    private CustomFieldsSettings customFieldsSettings = new()
    {
            CustomStrings = GetInitCustomFields(CustomFieldsCount),
            CustomTexts = GetInitCustomFields(CustomFieldsCount),
            CustomInts = GetInitCustomFields(CustomFieldsCount),
            CustomBools = GetInitCustomFields(CustomFieldsCount),
            CustomDates = GetInitCustomFields(CustomFieldsCount),
    };

    private static List<CustomField> GetInitCustomFields(int count)
    {
        var customFieldsList = new List<CustomField>(count);
        for (int i = 0; i < count; i++)
        {
            customFieldsList.Add(new CustomField());
        }
        return customFieldsList;
    }

    protected override async Task OnInitializedAsync()
    {
        themes = await CollectionService.GetThemes();
    }

    public async Task AddCollection()
    {
        if (await AuthService.IsUserAuthenticated())
        {
            collection.UserId = await AuthService.GetCurrentUserId();
            if(await AuthService.IsAllowManageCollection(collection))
            {
                collection.CustomFieldsSettings = customFieldsSettings;
                await CollectionService.AddCollection(collection);
                NavigationManager.NavigateTo($"/{NavCollections}/{collection.Id}");
            }
        }
    }
}
