@attribute [Route(AppRouteCollections)]
@attribute [Authorize(Policy = PolicyUserNotBlocked)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject CollectionService CollectionService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Collections> locale

<PageTitle>@locale["Collections"]</PageTitle>

<MudButtonGroup Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined">
    <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="NavigateToAddCollection">@locale["Add collection"]</MudButton>
</MudButtonGroup>

<MudDivider DividerType="DividerType.Middle" Class="my-2" />

<MudTable T="Collection" Items="@collections" Hover=" true" OnRowClick="@NavigateToCollectionDetails" RowClass="cursor-pointer">
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Collection, object>(x=>x.Name)">@locale["Name"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Collection, object>(x=>x.Theme?.Name)">@locale["Theme"]</MudTableSortLabel></MudTh>
        <MudTh>@locale["Description"]</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            @if (!string.IsNullOrEmpty(context.Image))
            {
                <MudAvatar Rounded="true" Color="Color.Transparent">
                    <ImageComponent FileName="@context.Image" />
                </MudAvatar>
            }
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Theme">@context.Theme?.Name</MudTd>
        <MudTd DataLabel="Description">@((MarkupString)@Markdig.Markdown.ToHtml(context?.Description ?? string.Empty))</MudTd>
    </RowTemplate>
</MudTable>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private IEnumerable<Collection> collections = [];

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState.User;

            if (user is not null)
            {
                if (user.Identity is not null && user.Identity.IsAuthenticated)
                {
                    var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                    if (!string.IsNullOrEmpty(userId))
                    {
                        collections = await CollectionService.GetUserCollections(userId);
                    }
                }
            }
        }
    }

    private void NavigateToCollectionDetails(TableRowClickEventArgs<Collection> args)
    {
        NavigationManager.NavigateTo($"/{NavCollections}/{args.Item.Id}");
    }

    private void NavigateToAddCollection()
    {
        NavigationManager.NavigateTo($"/{NavCollections}/{NavCreate}");
    }
}
