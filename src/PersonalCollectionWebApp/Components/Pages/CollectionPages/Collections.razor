@page "/collections"
@using System.Security.Claims
@rendermode InteractiveServer
@attribute [Authorize]
@inject CollectionService CollectionService
@inject NavigationManager NavigationManager

<PageTitle>Collections</PageTitle>

<p>
    <a href="Collections/Create">Create New</a>
</p>

<MudTable T="PersonalCollection" Items="@collections" Hover=" true" OnRowClick="@CollectionDetails" RowClass="cursor-pointer">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<PersonalCollection, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh>Theme</MudTh>
        <MudTh>Description</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Theme">@context.Theme?.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
    </RowTemplate>
</MudTable>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private IEnumerable<PersonalCollection> collections = [];

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState.User;

            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
                if(!string.IsNullOrEmpty(userId))
                {
                    collections = await CollectionService.GetUserCollections(userId);
                }          
            }
        }
    }

    private void CollectionDetails(TableRowClickEventArgs<PersonalCollection> collection)
    {
        NavigationManager.NavigateTo($"/collections/{collection.Item.Id}");
    }
}
