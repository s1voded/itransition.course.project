@attribute [Route(AppRouteCollectionDetails)]
@attribute [Authorize(Policy = PolicyUserNotBlockedOrAnonymous)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject CollectionService CollectionService
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IDialogService DialogService
@inject ImageStorageService ImageStorageService
@inject IStringLocalizer<CollectionDetails> locale

<PageTitle>@collection?.Name</PageTitle>

@if(collection != null)
{
    @if (canManageCollection)
    {
        <MudButtonGroup Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined">
            <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="NavigateToAddItem">@locale["Add item"]</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="NavigateToEditCollection">@locale["Edit collection"]</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="OnDeleteCollection">@locale["Delete collection"]</MudButton>
        </MudButtonGroup>
    }

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudStack Justify=Justify.FlexStart AlignItems=AlignItems.Center Row=true>
        <MudPaper Class="pa-4" Elevation="1">
            <MudText>@locale["Name"]: <b>@collection?.Name</b></MudText>
            <MudText>@locale["Theme"]: <b>@collection?.Theme?.Name</b></MudText>
            <MudText>@locale["Author"]: <b>@collection?.User.UserName</b></MudText>
            <MudText>@locale["Description"]:</MudText>
            @((MarkupString)@Markdig.Markdown.ToHtml(collection?.Description ?? string.Empty))
        </MudPaper>
        @if (!string.IsNullOrEmpty(collection.Image))
        {
            <MudBadge Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Overlap="true" Visible=@canManageCollection OnClick=@OnDeleteImage BadgeClass="cursor-pointer">
                <ImageComponent FileName=@collection.Image />
            </MudBadge>
        }
        else
        {
            @if (canManageCollection)
            {
                <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="OnUploadImage">
                    <ButtonTemplate>
                        <MudIconButton HtmlTag="label" Color="Color.Info" for="@context.Id" Icon="@Icons.Material.Filled.AddAPhoto" />
                    </ButtonTemplate>
                    <SelectedTemplate>
                        @if (context != null)
                        {
                            <MudText>@context.Name</MudText>
                            <MudProgressCircular Size="Size.Small" Color="Color.Default" Indeterminate="true" />
                        }
                        else
                        {
                            <MudText Typo="Typo.caption">no image file</MudText>
                        }
                    </SelectedTemplate>
                </MudFileUpload>
            }
        }
    </MudStack>

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudTable T="Item" Items="@collection?.Items" Hover="true" Dense="true" OnRowClick="@NavigateToItemDetails" RowClass="cursor-pointer">
        <ToolBarContent>
            <MudText Typo="Typo.h5">@locale["Items"]</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x=>x.Name)">@locale["Name"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x=>x.CreatedDate)">@locale["Added"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x=>x.Tags?.Count)">@locale["Tags"]</MudTableSortLabel></MudTh>
            @for (int i = 0; i < CustomFieldsCount; i++)
            {
                var index = i;
                @if (collection?.CustomFieldsSettings != null && collection.CustomFieldsSettings.CustomStrings[index].Enable)
                {
                    <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x=>x.CustomStrings[index])">@collection.CustomFieldsSettings.CustomStrings[index].Name</MudTableSortLabel></MudTh>
                }
            }
            @for (int i = 0; i < CustomFieldsCount; i++)
            {
                var index = i;
                @if (collection?.CustomFieldsSettings != null && collection.CustomFieldsSettings.CustomDates[index].Enable)
                {
                    <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x=>x.CustomDates[index])">@collection.CustomFieldsSettings.CustomDates[index].Name</MudTableSortLabel></MudTh>
                }
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Added">@context.CreatedDate.ToLocalTime()</MudTd>
            <MudTd DataLabel="Tags">@string.Join(", ", context.Tags.Select(t => t.Name))</MudTd>
            @for (int i = 0; i < CustomFieldsCount; i++)
            {
                var index = i;
                @if (collection?.CustomFieldsSettings != null && collection.CustomFieldsSettings.CustomStrings[index].Enable)
                {
                    <MudTd DataLabel="@collection.CustomFieldsSettings.CustomStrings[index].Name">@context.CustomStrings[index]</MudTd>
                }
            }
            @for (int i = 0; i < CustomFieldsCount; i++)
            {
                var index = i;
                @if (collection?.CustomFieldsSettings != null && collection.CustomFieldsSettings.CustomDates[index].Enable)
                {
                    <MudTd DataLabel="@collection.CustomFieldsSettings.CustomDates[index].Name">@context.CustomDates[index]</MudTd>
                }
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" RowsPerPageString=@locale["Rows per page"] />
        </PagerContent>
    </MudTable>
}

@code {
    [Parameter]
    public int CollectionId { get; set; }

    private Collection? collection;
    private bool canManageCollection;

    protected override async Task OnInitializedAsync()
    {
        collection = await CollectionService.GetCollectionWithItems(CollectionId);

        if (collection is null) NavigationManager.NavigateTo(AppRouteNotFound);
        else canManageCollection = await AuthService.IsAllowManageCollection(collection);
    }

    private void OnDeleteCollection()
    {
        var deleteContentText = $"{locale["collection"]} {collection?.Name}";
        var parameters = new DialogParameters<DeleteDialog>();
        parameters.Add(x => x.ContentText, deleteContentText);
        parameters.Add(x => x.OnDelete, new EventCallbackFactory().Create(this, DeleteCollection));

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };   
        DialogService.Show<DeleteDialog>($"{locale["Delete"]} {deleteContentText}", parameters, options);
    }

    private async Task DeleteCollection()
    {
        if (await AuthService.IsAllowManageCollection(collection))
        {
            await CollectionService.DeleteCollection(collection);
            if (!string.IsNullOrEmpty(collection.Image))
            {
                await ImageStorageService.DeleteAsync(collection.Image);
            }
            NavigationManager.NavigateTo($"/{NavCollections}");
        }
    }

    private async Task OnUploadImage(IBrowserFile file)
    {
        if (await AuthService.IsAllowManageCollection(collection))
        {
            var fileName = $"{Guid.NewGuid()}_{file.Name}";
            await ImageStorageService.UploadAsync(fileName, file.OpenReadStream(2097152));
            collection.Image = fileName;
            await CollectionService.UpdateCollection(collection);
        }
    }

    private async Task OnDeleteImage()
    {
        if (await AuthService.IsAllowManageCollection(collection))
        {
            await ImageStorageService.DeleteAsync(collection.Image);
            collection.Image = null;
            await CollectionService.UpdateCollection(collection);
        }
    }

    private void NavigateToAddItem()
    {
        NavigationManager.NavigateTo($"/{NavCollections}/{CollectionId}/{NavCreate}");
    }

    private void NavigateToEditCollection()
    {
        NavigationManager.NavigateTo($"/{NavCollections}/{CollectionId}/{NavEdit}");
    }

    private void NavigateToItemDetails(TableRowClickEventArgs<Item> args)
    {
        NavigationManager.NavigateTo($"/{NavItems}/{args.Item.Id}");
    }
}
