@page "/collections/{CollectionId:int}"
@using PersonalCollectionWebApp.Components.Shared
@attribute [Authorize(Policy = Constants.PolicyUserNotBlockedOrAnonymous)]
@rendermode InteractiveServer
@inject CollectionService CollectionService
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject IDialogService DialogService

<PageTitle>@collection?.Name</PageTitle>

@if(collection != null)
{
    @if (canManageCollection)
    {
        <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="NavigateToAddItem">Add item</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="NavigateToEditCollection">Edit collection</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="OnDeleteCollection">Delete collection</MudButton>
    }

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudPaper Class="pa-4" Elevation="1">
        <MudText>Name: <b>@collection?.Name</b></MudText>
        <MudText>Theme: <b>@collection?.Theme?.Name</b></MudText>
        <MudText>Author: <b>@collection?.User.UserName</b></MudText>
        <MudText>Description:</MudText>
        @((MarkupString)@Markdig.Markdown.ToHtml(collection?.Description ?? string.Empty))
    </MudPaper>

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudTable T="Item" Items="@collection?.Items" Hover="true" Dense="true" OnRowClick="@NavigateToItemDetails" RowClass="cursor-pointer">
        <ToolBarContent>
            <MudText Typo="Typo.h5">Items</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Added</MudTh>
            <MudTh>Tags</MudTh>
            @for (int i = 0; i < Constants.CustomFieldsCount; i++)
            {
                var index = i;
                @if (collection?.CustomFieldsSettings != null && collection.CustomFieldsSettings.CustomStrings[index].Enable)
                {
                    <MudTh>@collection.CustomFieldsSettings.CustomStrings[index].Name</MudTh>
                }
            }
            @for (int i = 0; i < Constants.CustomFieldsCount; i++)
            {
                var index = i;
                @if (collection?.CustomFieldsSettings != null && collection.CustomFieldsSettings.CustomDates[index].Enable)
                {
                    <MudTh>@collection.CustomFieldsSettings.CustomDates[index].Name</MudTh>
                }
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Added">@context.CreatedDate.ToLocalTime()</MudTd>
            <MudTd DataLabel="Tags">@string.Join(", ", context.Tags.Select(t => t.Name))</MudTd>
            @for (int i = 0; i < Constants.CustomFieldsCount; i++)
            {
                var index = i;
                @if (collection?.CustomFieldsSettings != null && collection.CustomFieldsSettings.CustomStrings[index].Enable)
                {
                    <MudTd DataLabel="@collection.CustomFieldsSettings.CustomStrings[index].Name">@context.CustomStrings[index]</MudTd>
                }
            }
            @for (int i = 0; i < Constants.CustomFieldsCount; i++)
            {
                var index = i;
                @if (collection?.CustomFieldsSettings != null && collection.CustomFieldsSettings.CustomDates[index].Enable)
                {
                    <MudTd DataLabel="@collection.CustomFieldsSettings.CustomDates[index].Name">@context.CustomDates[index]</MudTd>
                }
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
    </MudTable>
}
else
{
    <MudText Align="Align.Center">Collection not found.</MudText>
}

@code {
    [Parameter]
    public int CollectionId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private PersonalCollection? collection;
    private bool canManageCollection;

    protected override async Task OnInitializedAsync()
    {
        collection = await CollectionService.GetCollectionWithItems(CollectionId);

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                var isAuthorized = await AuthorizationService.AuthorizeAsync(user, collection, Constants.PolicyCanManageCollection);
                canManageCollection = isAuthorized.Succeeded;
            }
        }
    }

    private void NavigateToAddItem()
    {
        NavigationManager.NavigateTo($"/collections/{CollectionId}/itemcreate");
    }

    private void NavigateToEditCollection()
    {
        NavigationManager.NavigateTo($"/collections/{CollectionId}/edit");
    }

    private void NavigateToItemDetails(TableRowClickEventArgs<Item> args)
    {
        NavigationManager.NavigateTo($"/items/{args.Item.Id}");
    }

    private void OnDeleteCollection()
    {
        var parameters = new DialogParameters<DeleteDialog>();
        parameters.Add(x => x.ContentText, $"Do you really want to delete collection {collection?.Name}? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);
        parameters.Add(x => x.OnDelete, new EventCallbackFactory().Create(this, DeleteCollection));

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };   
        DialogService.Show<DeleteDialog>($"Delete collection {collection?.Name}", parameters, options);
    }

    private async Task DeleteCollection()
    {
        if (collection != null)
        {
            await CollectionService.DeleteCollection(collection);
        }
        NavigationManager.NavigateTo($"/collections");
    }
}
