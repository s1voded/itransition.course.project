@attribute [Route(AppRouteCollectionEdit)]
@attribute [Authorize(Policy = PolicyUserNotBlocked)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject CollectionService CollectionService
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IStringLocalizer<CollectionEdit> locale

<PageTitle>@locale["Edit"] @collection?.Name</PageTitle>

@if (collection != null)
{
    @if (canManageCollection)
    {
        <CollectionEditCreateComponent 
            Collection=@collection
            Themes=@themes
            CustomFieldsSettings=@collection?.CustomFieldsSettings
            OnSubmit=@OnUpdateCollection
            SubmitButtonText=@locale["Update"]>
        </CollectionEditCreateComponent>
    }
}

@code {
    [Parameter]
    public int CollectionId { get; set; }

    private Collection? collection;
    private IEnumerable<Theme> themes = [];
    private bool canManageCollection;

    protected override async Task OnInitializedAsync()
    {
        collection = await CollectionService.GetCollectionById(CollectionId);
        themes = await CollectionService.GetThemes();

        if (collection is null) NavigationManager.NavigateTo(AppRouteNotFound);
        else canManageCollection = await AuthService.IsAllowManageCollection(collection);
    }

    private async Task OnUpdateCollection()
    {
        if (await AuthService.IsAllowManageCollection(collection))
        {
            await CollectionService.UpdateCollection(collection);
            NavigationManager.NavigateTo($"/{NavCollections}/{collection.Id}");
        }
    }

    private void NavigateToAccessDenied()
    {
        var uri = new Uri(NavigationManager.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var uriEscaped = Uri.EscapeDataString(uri);
        NavigationManager.NavigateTo($"{AppRouteAccessDenied}?ReturnUrl={uriEscaped}", forceLoad: true);
    }
}
