@page "/collections/{CollectionId:int}/edit"
@attribute [Authorize(Policy = Constants.PolicyUserNotBlocked)]
@rendermode InteractiveServer
@inject CollectionService CollectionService
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService

@if (canManageCollection && collection != null)
{
    <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="OnDeleteCollection">Delete collection</MudButton>
}

@code {
    [Parameter]
    public int CollectionId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private PersonalCollection? collection;
    private bool canManageCollection;

    protected override async Task OnInitializedAsync()
    {
        collection = await CollectionService.GetCollectionWithItems(CollectionId);

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                var isAuthorized = await AuthorizationService.AuthorizeAsync(user, collection, Constants.PolicyCanManageCollection);
                canManageCollection = isAuthorized.Succeeded;
            }
        }
    }

    private async Task OnDeleteCollection()
    {
        if (collection != null)
        {
            await CollectionService.DeleteCollection(collection);
        }
        NavigationManager.NavigateTo($"/collections");
    }
}
