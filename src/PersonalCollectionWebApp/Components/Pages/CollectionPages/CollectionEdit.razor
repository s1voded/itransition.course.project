@attribute [Route(AppRouteCollectionEdit)]
@attribute [Authorize(Policy = PolicyUserNotBlocked)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject CollectionService CollectionService
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject IStringLocalizer<CollectionEdit> locale

<PageTitle>@locale["Edit"] @collection?.Name</PageTitle>

@if (collection != null)
{
    @if (canManageCollection)
    {
        <CollectionEditCreateComponent 
            Collection="collection"
            Themes="themes"
            CustomFieldsSettings="collection?.CustomFieldsSettings"
            OnSubmit="UpdateCollection" 
            SubmitButtonText=@locale["Update"]>
        </CollectionEditCreateComponent>
    }
}

@code {
    [Parameter]
    public int CollectionId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private Collection? collection;
    private IEnumerable<Theme> themes = [];
    private bool canManageCollection;

    protected override async Task OnInitializedAsync()
    {
        collection = await CollectionService.GetCollectionById(CollectionId);
        themes = await CollectionService.GetThemes();

        if (collection is null) NavigationManager.NavigateTo(AppRouteNotFound);

        await DoActionCollection(ActionType.CanManageInit);
    }

    public async Task UpdateCollection() => await DoActionCollection(ActionType.Update);

    private async Task DoActionCollection(ActionType action)
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                var isAuthorized = await AuthorizationService.AuthorizeAsync(user, collection, PolicyCanManageCollection);
                if (!isAuthorized.Succeeded) NavigateToAccessDenied();

                switch (action)
                {
                    case ActionType.CanManageInit:
                        canManageCollection = isAuthorized.Succeeded;
                        break;

                    case ActionType.Update:
                        if (isAuthorized.Succeeded)
                        {
                            await CollectionService.UpdateCollection(collection);
                            NavigationManager.NavigateTo($"/{NavCollections}/{collection.Id}");
                        }
                        break;
                }
            }
        }
    }

    private void NavigateToAccessDenied()
    {
        var uri = new Uri(NavigationManager.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var uriEscaped = Uri.EscapeDataString(uri);
        NavigationManager.NavigateTo($"{AppRouteAccessDenied}?ReturnUrl={uriEscaped}", forceLoad: true);
    }
}
