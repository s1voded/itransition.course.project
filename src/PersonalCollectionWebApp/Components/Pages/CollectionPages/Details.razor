@page "/collections/{CollectionId:int}"
@inject CollectionService CollectionService
@inject IAuthorizationService AuthorizationService

<PageTitle>Details</PageTitle>

@if(canManageCollection)
{
    <MudButton StartIcon="@Icons.Material.Filled.Edit">Edit</MudButton>
}

<MudTable Items="@collection?.Items" Hover="true" Dense="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Collection items</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Added</MudTh>
        <MudTh>Tags</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Added">@context.CreatedDate</MudTd>
        <MudTd DataLabel="Tags">@string.Join(", ", context.Tags.Select(t => t.Name))</MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter]
    public int CollectionId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private PersonalCollection collection;
    private bool canManageCollection;

    protected override async Task OnInitializedAsync()
    {
        collection = await CollectionService.GetCollectionWithItems(CollectionId);

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                var isAuthorized = await AuthorizationService.AuthorizeAsync(user, collection, Constants.PolicyCanManageCollection);
                canManageCollection = isAuthorized.Succeeded;
            }
        }
    }
}
