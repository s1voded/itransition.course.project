@using System.Security.Claims
@attribute [Route(AppRouteUserManager)]
@attribute [Authorize(Policy = PolicyAdminOnly)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IUserManagerService UserManagerService
@inject IDialogService DialogService
@inject IStringLocalizer<ManageUsers> locale
  
<PageTitle>@locale["Manage users"]</PageTitle>

<MudButtonGroup Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined">
    <MudButton StartIcon="@Icons.Material.Filled.PersonAdd" OnClick="@(args => ChangeUser(ChangeType.SetAdmin))">@locale["Set admin"]</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.PersonRemove" OnClick="@(args => ChangeUser(ChangeType.RemoveAdmin))">@locale["Remove admin"]</MudButton>
</MudButtonGroup>

<MudButtonGroup Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined">
    <MudButton StartIcon="@Icons.Material.Filled.Lock" OnClick="@(args => ChangeUser(ChangeType.Block))">@locale["Block"]</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.LockOpen" OnClick="@(args => ChangeUser(ChangeType.Unblock))">@locale["Unblock"]</MudButton>
</MudButtonGroup>

<MudButtonGroup Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined">
    <MudButton StartIcon="@Icons.Material.Filled.PersonOff" OnClick=OnDeleteUser>@locale["Delete"]</MudButton>
</MudButtonGroup>

<MudDivider DividerType="DividerType.Middle" Class="my-2" />

<MudTable T=ApplicationUserDto Items="@users" Hover="true" Dense="true" MultiSelection="true" @bind-SelectedItems="selectedUsers" Filter="UserFilter" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" SelectOnRowClick=false OnRowClick="@NavigateToUserCollections" RowClass="cursor-pointer">
    <ToolBarContent>
        <MudText Typo="Typo.h5">@locale["Users"]</MudText>
        <MudSpacer />
        <MudTextField Immediate="true" @bind-Value="searchString" Placeholder=@locale["Search users"] Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ApplicationUserDto, object>(x=>x.UserName)">@locale["Username"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ApplicationUserDto, object>(x=>x.Email)">@locale["Email"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ApplicationUserDto, object>(x=>x.Roles.Count)">@locale["Role"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ApplicationUserDto, object>(x=>x.IsBlocked)">@locale["Status"]</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Username">@context.UserName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Role">@string.Join(",", context.Roles)</MudTd>
        <MudTd DataLabel="Status">@(context.IsBlocked ? locale["Blocked"] : "")</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
</MudTable>

@code {
    private HashSet<ApplicationUserDto> selectedUsers = [];
    private IEnumerable<ApplicationUserDto> users = [];
    private string? searchString;
    private enum ChangeType
    {
        SetAdmin,
        RemoveAdmin,
        Block,
        Unblock,
        Delete
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
    }

    private async Task GetUsers()
    {
        users = await UserManagerService.GetAllUsers();
    }

    private async Task DeleteUser() => await ChangeUser(ChangeType.Delete);

    private void OnDeleteUser()
    {
        if (selectedUsers.Count > 0)
        {
            var deleteContentText = selectedUsers.Count == 1 ? $"{locale["user"]} {selectedUsers.First().UserName}" : $"{selectedUsers.Count} users";

            var parameters = new DialogParameters<DeleteDialog>();
            parameters.Add(x => x.ContentText, deleteContentText);
            parameters.Add(x => x.OnDelete, new EventCallbackFactory().Create(this, DeleteUser));

            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
            DialogService.Show<DeleteDialog>($"{locale["Delete"]} {deleteContentText}", parameters, options);
        }
    }

    private async Task ChangeUser(ChangeType changeType)
    {
        if (await AuthService.IsUserAdmin())
        {
            var userIds = selectedUsers.Select(u => u.Id).ToArray();
            switch (changeType)
            {
                case ChangeType.SetAdmin:
                    await UserManagerService.AddUsersClaim(userIds, ClaimTypes.Role, AdminRole);
                    break;

                case ChangeType.RemoveAdmin:
                    await UserManagerService.RemoveUsersClaim(userIds, ClaimTypes.Role, AdminRole);
                    break;

                case ChangeType.Block:
                    await UserManagerService.UpdateUsersBlockStatus(userIds, true);
                    break;

                case ChangeType.Unblock:
                    await UserManagerService.UpdateUsersBlockStatus(userIds, false);
                    break;
                case ChangeType.Delete:
                    await UserManagerService.DeleteUsers(userIds);
                    break;
            }
            await GetUsers();
        }
        else NavigateToAccessDenied();
    }

    private Func<ApplicationUserDto, bool> UserFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if ($"{x.Id}".Contains(searchString))
            return true;

        if (x.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private void NavigateToAccessDenied()
    {
        var uri = new Uri(NavigationManager.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var uriEscaped = Uri.EscapeDataString(uri);
        NavigationManager.NavigateTo($"{AppRouteAccessDenied}?ReturnUrl={uriEscaped}", forceLoad: true);
    }

    private void NavigateToUserCollections(TableRowClickEventArgs<ApplicationUserDto> args)
    {
        NavigationManager.NavigateTo($"/{NavCollections}?UserId={args.Item.Id}", true);
    }
}
