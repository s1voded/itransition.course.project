@attribute [Route(AppRouteUserManager)]
@attribute [Authorize(Policy = PolicyAdminOnly)]
@rendermode InteractiveServer
@inject UserManagerService UserManagerService
@inject IAuthorizationService AuthorizationService

<PageTitle>Manage users</PageTitle>

<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
    <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="@(args => ChangeUser(ChangeType.SetAdmin))">Set admin</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.Remove" OnClick="@(args => ChangeUser(ChangeType.RemoveAdmin))">Remove admin</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.Block" OnClick="@(args => ChangeUser(ChangeType.Block))">Block</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.Unarchive" OnClick="@(args => ChangeUser(ChangeType.Unblock))">Unblock</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="@(args => ChangeUser(ChangeType.Delete))">Delete</MudButton>
</MudButtonGroup>

<MudTable Items="@users" Hover="true" Dense="true" MultiSelection="true" @bind-SelectedItems="selectedUsers" Filter="UserFilter" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h4">Users</MudText>
        <MudSpacer />
        <MudTextField Immediate="true" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ApplicationUserDto, object>(x=>x.UserName)">Username</MudTableSortLabel></MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Role</MudTh>
        <MudTh>Block</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Username">@context.UserName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Role">@string.Join(",", context.Roles)</MudTd>
        <MudTd DataLabel="Block">@context.IsBlocked</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
</MudTable>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private HashSet<ApplicationUserDto> selectedUsers = [];
    private IEnumerable<ApplicationUserDto> users = [];
    private string? searchString;
    private enum ChangeType
    {
        SetAdmin,
        RemoveAdmin,
        Block,
        Unblock,
        Delete
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
    }

    private async Task GetUsers()
    {
        users = await UserManagerService.GetAllUsers();
    }

    private async Task ChangeUser(ChangeType changeType)
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                if ((await AuthorizationService.AuthorizeAsync(user, PolicyAdminOnly)).Succeeded)
                {
                    foreach (var selectedUser in selectedUsers)
                    {
                        switch (changeType)
                        {
                            case ChangeType.SetAdmin:
                                await UserManagerService.AddUserRole(selectedUser.Id, AdminRole);
                                break;

                            case ChangeType.RemoveAdmin:
                                await UserManagerService.RemoveUserRole(selectedUser.Id, AdminRole);
                                break;

                            case ChangeType.Block:
                                await UserManagerService.UpdateBlockStatusUser(selectedUser.Id, true);
                                break;

                            case ChangeType.Unblock:
                                await UserManagerService.UpdateBlockStatusUser(selectedUser.Id, false);
                                break;
                            case ChangeType.Delete:
                                await UserManagerService.DeleteUser(selectedUser.Id);
                                break;
                        }
                    }
                }
            }
        }
        await GetUsers();
    }

    private Func<ApplicationUserDto, bool> UserFilter => x =>
    {
    if (string.IsNullOrWhiteSpace(searchString))
        return true;

    if ($"{x.Id}".Contains(searchString))
        return true;

    if (x.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;

    if (x.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;

    return false;
    };
}
