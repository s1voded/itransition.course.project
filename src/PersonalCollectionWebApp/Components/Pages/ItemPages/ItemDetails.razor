@attribute [Route(AppRouteItemDetails)]
@attribute [Authorize(Policy = PolicyUserNotBlockedOrAnonymous)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject ItemService ItemService
@inject CollectionService CollectionService
@inject ReactionsService ReactionsService
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject PageHelperService PageHelperService
@inject IDialogService DialogService
@inject IStringLocalizer<ItemDetails> locale
@inject IJSRuntime JS
@implements IAsyncDisposable

<PageTitle>@item?.Name</PageTitle>

@if (item != null)
{
    @if (canManageCollection)
    {
        <MudButtonGroup Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined">
            <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="NavigateToEditItem">@locale["Edit item"]</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="OnDeleteItem">@locale["Delete item"]</MudButton>
        </MudButtonGroup>
    }

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudPaper Class="pa-4" Elevation="1">
        <MudText>@locale["Name"]: <b>@item.Name</b></MudText>
        <MudText>@locale["Added"]: <b>@PageHelperService.GetLocalTime(item.CreatedDate, timeZoneOffset)</b></MudText>
        <MudText>
            @locale["Collection"]:
            <MudLink Href=@($"/{NavCollections}/{item.CollectionId}") Class="pa-1">@collection.Name</MudLink>
        </MudText>
        <MudText>
            @locale["Tags"]:
            @foreach (var tag in itemTags)
            {
                <MudLink Href=@PageHelperService.GetTagSearchHref(tag.Name) Class="pa-1">@tag.Name</MudLink>
            }
        </MudText>
        @if (collection.CustomFieldsSettings != null)
        {
            var customFields = collection.CustomFieldsSettings;
            <CustomFieldsValueComponent CustomFields=@customFields.CustomStrings ItemCustomField=@item.CustomStrings />
            <CustomFieldsValueComponent CustomFields=@customFields.CustomTexts ItemCustomField=@item.CustomTexts />
            <CustomFieldsValueComponent CustomFields=@customFields.CustomInts ItemCustomField=@item.CustomInts.Select(i => i.ToString()).ToArray() />
            <CustomFieldsValueComponent CustomFields=@customFields.CustomBools ItemCustomField=@item.CustomBools.Select(b => b.ToString()).ToArray() />
            <CustomFieldsValueComponent CustomFields=@customFields.CustomDates ItemCustomField=@item.CustomDates.Select(d => d.HasValue ? d.Value.ToShortDateString() : "").ToArray() />
        }
        <LikesComponent ItemLiked=@itemLiked ItemLikes=@itemLikes LikeDisable=@(!userIsAuth) OnLikeItem=@OnLikeItem />
    </MudPaper>
    <MudDivider DividerType="DividerType.Middle" Class="my-2" />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudForm @bind-IsValid="@formIsValid">
                    <MudTextField @bind-Value="commentContent" Label=@locale["Comment"] Required="true" RequiredError=@locale["Comment content is required"] Disabled=@(!userIsAuth) />
                    <MudDivider DividerType="DividerType.Middle" Class="my-2" />
                    <div class="d-flex align-center justify-space-between">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!formIsValid || !userIsAuth)" Class="ml-auto" OnClick="OnSubmitComment">@locale["Send"]</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudStack>
        @foreach (var comment in itemComments)
        {
            <MudPaper Class="pa-4">
                <MudStack Row="true">
                    <MudStack Justify="Justify.Center" Spacing="0">
                        <MudText Typo="Typo.subtitle2">@(comment.Author != null ? comment.Author : locale["deleted user"])</MudText>
                        <MudText Typo="Typo.caption">@comment.AddedDateTime</MudText>
                        <MudDivider />
                        <MudText Typo="Typo.body1">@comment.Content</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        }
    </MudStack>
}

@code {
    [Parameter]
    public int ItemId { get; set; }

    private HubConnection? hubConnection;
    private ItemEditCreateDto? item;
    private CollectionCustomFieldSettingsDto? collection;
    private bool canManageCollection, formIsValid, itemLiked, userIsAuth;
    private IEnumerable<CommentDto> itemComments = [];
    private IEnumerable<LikeDto> itemLikes = [];
    private IEnumerable<TagDto> itemTags = [];
    private string? commentContent, userId;
    private int timeZoneOffset;

    protected override async Task OnInitializedAsync()
    {
        await InitHubConnection();

        item = await ItemService.GetItemWithCollection(ItemId);
        itemTags = await ItemService.GetItemTags(ItemId);
        collection = await CollectionService.GetCollectionCustomFieldSettings(item.CollectionId);

        if (item is null) NavigationManager.NavigateTo(AppRouteNotFound);
        else canManageCollection = await AuthService.IsAllowManageCollection(collection.UserId);
        userIsAuth = await AuthService.IsUserAuthenticated();

        await GetComments();
        await GetLikes();

        timeZoneOffset = await JS.InvokeAsync<int>(JSGetTimeOffsetFuncName);
    }

    private async Task GetComments()
    {
        itemComments = await ReactionsService.GetItemComments(ItemId);
    }

    private async Task GetLikes()
    {
        itemLikes = await ReactionsService.GetItemLikes(ItemId);

        var userId = await AuthService.GetCurrentUserId();
        if (!string.IsNullOrEmpty(userId))
        {
            itemLiked = itemLikes.Any(l => l.UserId == userId);
        }
    }

    private void OnDeleteItem()
    {
        var deleteContentText = $"{locale["item"]} {item?.Name}";
        var parameters = new DialogParameters<DeleteDialog>();
        parameters.Add(x => x.ContentText, deleteContentText);
        parameters.Add(x => x.OnDelete, new EventCallbackFactory().Create(this, DeleteItem));

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        DialogService.Show<DeleteDialog>($"{locale["Delete"]} {deleteContentText}", parameters, options);
    }

    private async Task DeleteItem()
    {
        if (await AuthService.IsAllowManageCollection(collection.UserId))
        {
            await ItemService.DeleteItem(item.Id);
            NavigationManager.NavigateTo($"/{NavCollections}/{item?.CollectionId}");
        }
    }

    private async Task OnSubmitComment()
    {
        if(await AuthService.IsUserAuthenticated())
        {
            var userId = await AuthService.GetCurrentUserId();
            if (!string.IsNullOrEmpty(userId))
            {
                var comment = new CommentDto() { ItemId = ItemId, Content = commentContent, AddedDateTime = DateTime.UtcNow, UserId = userId };
                commentContent = "";
                await ReactionsService.AddComment(comment);
                await SendUpdateComments();
                await GetComments();
            }
        }
    }

    private async Task OnLikeItem()
    {
        if (await AuthService.IsUserAuthenticated())
        {
            var userId = await AuthService.GetCurrentUserId();
            if (!string.IsNullOrEmpty(userId))
            {
                await ReactionsService.UpdateUserLike(ItemId, userId);
                await GetLikes();
            }                
        }
    }

    private void NavigateToEditItem()
    {
        NavigationManager.NavigateTo($"/{NavItems}/{ItemId}/{NavEdit}");
    }

    private async Task InitHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(HubName))
            .Build();

        hubConnection.On(HubReceiveCommentsUpdate, async () =>
        {
            await GetComments();
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync(HubJoinGroup, ItemId);
    }

    private async Task SendUpdateComments()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync(HubSendCommentsUpdate, ItemId);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync(HubLeaveGroup, ItemId);
            await hubConnection.DisposeAsync();
        }
    }
}
