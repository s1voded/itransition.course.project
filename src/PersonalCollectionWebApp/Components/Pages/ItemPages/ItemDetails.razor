@page "/items/{ItemId:int}"
@attribute [Authorize(Policy = Constants.PolicyUserNotBlockedOrAnonymous)]
@rendermode InteractiveServer
@inject CollectionService CollectionService
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService

<PageTitle>@item?.Name</PageTitle>

<h3>ItemName: @item?.Name</h3>

@if (canManageItem && item != null)
{
    <MudButton StartIcon="@Icons.Material.Filled.Add">Edit item</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="OnDeleteItem">Delete item</MudButton>
}

@code {
    [Parameter]
    public int ItemId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private Item? item;
    private bool canManageItem;

    protected override async Task OnInitializedAsync()
    {
        item = await CollectionService.GetItemWithollection(ItemId);

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                var isAuthorized = await AuthorizationService.AuthorizeAsync(user, item?.Collection, Constants.PolicyCanManageCollection);
                canManageItem = isAuthorized.Succeeded;
            }
        }
    }

    private async Task OnDeleteItem()
    {
        if(item != null)
        {
            await CollectionService.DeleteItem(item);
        }
        NavigationManager.NavigateTo($"/collections/{item?.Collection.Id}");
    }
}
