@attribute [Route(Constants.AppRouteItemDetails)]
@attribute [Authorize(Policy = Constants.PolicyUserNotBlockedOrAnonymous)]
@rendermode InteractiveServer
@inject CollectionService CollectionService
@inject ReactionsService ReactionsService
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject IDialogService DialogService
@implements IAsyncDisposable

<PageTitle>@item?.Name</PageTitle>

@if (item != null)
{
    @if (canManageItem)
    {
        <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="NavigateToEditItem">Edit item</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="OnDeleteItem">Delete item</MudButton>
    }

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudPaper Class="pa-4" Elevation="1">
        <MudText>Name: <b>@item.Name</b></MudText>
        <MudText>Added: <b>@item.CreatedDate</b></MudText>
        <MudText>Collection: <b>@item.Collection.Name</b></MudText>
        <MudText>Tags: <b>@string.Join(", ", @item.Tags?.Select(t => t.Name))</b></MudText>
        @for (int i = 0; i < Constants.CustomFieldsCount; i++)
        {
            var index = i;
            @if (item.Collection.CustomFieldsSettings != null && item.Collection.CustomFieldsSettings.CustomStrings[index].Enable)
            {
                <MudText>@item.Collection.CustomFieldsSettings.CustomStrings[index].Name: <b>@item.CustomStrings[index]</b></MudText>
            }
        }
        @for (int i = 0; i < Constants.CustomFieldsCount; i++)
        {
            var index = i;
            @if (item.Collection.CustomFieldsSettings != null && item.Collection.CustomFieldsSettings.CustomTexts[index].Enable)
            {
                <MudText>@item.Collection.CustomFieldsSettings.CustomTexts[index].Name: <b>@item.CustomTexts[index]</b></MudText>
            }
        }
        @for (int i = 0; i < Constants.CustomFieldsCount; i++)
        {
            var index = i;
            @if (item.Collection.CustomFieldsSettings != null && item.Collection.CustomFieldsSettings.CustomInts[index].Enable)
            {
                <MudText>@item.Collection.CustomFieldsSettings.CustomInts[index].Name: <b>@item.CustomInts[index]</b></MudText>
            }
        }
        @for (int i = 0; i < Constants.CustomFieldsCount; i++)
        {
            var index = i;
            @if (item.Collection.CustomFieldsSettings != null && item.Collection.CustomFieldsSettings.CustomBools[index].Enable)
            {
                <MudText>@item.Collection.CustomFieldsSettings.CustomBools[index].Name: <b>@item.CustomBools[index]</b></MudText>
            }
        }
        @for (int i = 0; i < Constants.CustomFieldsCount; i++)
        {
            var index = i;
            @if (item.Collection.CustomFieldsSettings != null && item.Collection.CustomFieldsSettings.CustomDates[index].Enable)
            {
                <MudText>@item.Collection.CustomFieldsSettings.CustomDates[index].Name: <b>@item.CustomDates[index]</b></MudText>
            }
        }
    </MudPaper>

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <AuthorizeView>
        <Authorized>
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-4">
                        <MudForm @bind-IsValid="@formIsValid">
                            <MudTextField @bind-Value="commentContent" Label="Comment" Required="true" RequiredError="Comment content is required." />
                            <MudDivider DividerType="DividerType.Middle" Class="my-2" />
                            <div class="d-flex align-center justify-space-between">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!formIsValid)" Class="ml-auto" OnClick="SubmitComment">Send</MudButton>
                            </div>
                        </MudForm>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </Authorized>
    </AuthorizeView>

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudStack>
        @foreach (var comment in itemComments)
        {
            <MudPaper Class="pa-4">
                <MudStack Row="true">
                    <MudStack Justify="Justify.Center" Spacing="0">
                        <MudText Typo="Typo.subtitle2">@comment.User?.UserName</MudText>
                        <MudText Typo="Typo.caption">@comment.AddedDateTime</MudText>
                        <MudDivider />
                        <MudText Typo="Typo.body1">@comment.Content</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        }
    </MudStack>
}

@code {
    [Parameter]
    public int ItemId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private HubConnection? hubConnection;
    private Item? item;
    private bool canManageItem;
    private bool formIsValid;
    private IEnumerable<Comment> itemComments = [];
    private string? commentContent;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(Constants.HubName))
            .Build();

        hubConnection.On(Constants.HubReceiveCommentsUpdate, async () =>
        {
            await GetComments();
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync(Constants.HubJoinGroup, ItemId);

        item = await CollectionService.GetItemWithCollection(ItemId);
        await GetComments();

        if (item is null)
        {
            NavigationManager.NavigateTo("/notfound");
        }

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                var isAuthorized = await AuthorizationService.AuthorizeAsync(user, item?.Collection, Constants.PolicyCanManageCollection);
                canManageItem = isAuthorized.Succeeded;
            }
        }
    }

    private async Task GetComments()
    {
        itemComments = await ReactionsService.GetItemComments(ItemId);
    }

    private void OnDeleteItem()
    {
        var parameters = new DialogParameters<DeleteDialog>();
        parameters.Add(x => x.ContentText, $"Do you really want to delete item {item?.Name}? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);
        parameters.Add(x => x.OnDelete, new EventCallbackFactory().Create(this, DeleteItem));

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        DialogService.Show<DeleteDialog>($"Delete item {item?.Name}", parameters, options);
    }

    private async Task DeleteItem()
    {
        if(item != null)
        {
            await CollectionService.DeleteItem(item);
        }
        NavigationManager.NavigateTo($"/{Constants.NavCollections}/{item?.Collection.Id}");
    }

    private async Task SubmitComment()
    {
        if (!string.IsNullOrEmpty(commentContent))
        {
            if (authenticationState is not null)
            {
                var authState = await authenticationState;
                var user = authState?.User;

                if (user is not null)
                {
                    var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                    var comment = new Comment()
                        {
                            ItemId = ItemId,
                            Content = commentContent,
                            AddedDateTime = DateTime.UtcNow,
                            UserId = userId
                        };
                    commentContent = "";

                    await ReactionsService.AddComment(comment);
                    await SendUpdateComments();
                    await GetComments();
                }
            }            
        }
    }

    private void NavigateToEditItem()
    {
        NavigationManager.NavigateTo($"/{Constants.NavItems}/{ItemId}/{Constants.NavEdit}");
    }

    private async Task SendUpdateComments()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync(Constants.HubSendCommentsUpdate, ItemId);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync(Constants.HubLeaveGroup, ItemId);
            await hubConnection.DisposeAsync();
        }
    }
}
