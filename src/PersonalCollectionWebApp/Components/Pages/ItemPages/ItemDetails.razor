@attribute [Route(AppRouteItemDetails)]
@attribute [Authorize(Policy = PolicyUserNotBlockedOrAnonymous)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject ItemService ItemService
@inject ReactionsService ReactionsService
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IDialogService DialogService
@inject IStringLocalizer<ItemDetails> locale
@inject IJSRuntime JS
@implements IAsyncDisposable

<PageTitle>@item?.Name</PageTitle>

@if (item != null)
{
    @if (canManageCollection)
    {
        <MudButtonGroup Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined">
            <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="NavigateToEditItem">@locale["Edit item"]</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="OnDeleteItem">@locale["Delete item"]</MudButton>
        </MudButtonGroup>
    }

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudPaper Class="pa-4" Elevation="1">
        <MudText>@locale["Name"]: <b>@item.Name</b></MudText>
        <MudText>@locale["Added"]: <b>@GetLocalTime(item.CreatedDate)</b></MudText>
        <MudText>
            @locale["Collection"]:
            <MudLink Href=@($"/{NavCollections}/{item.Collection.Id}") Class="pa-1">@item.Collection.Name</MudLink>
        </MudText>
        <MudText>
            @locale["Tags"]:
            @foreach(var tag in item.Tags)
            {
                <MudLink Href=@GetTagSearchHref(tag.Name) Class="pa-1">@tag.Name</MudLink>
            }
        </MudText>
        @if (item.Collection.CustomFieldsSettings != null)
        {
            <CustomFieldsValueComponent T="string" CustomFields=@item.Collection.CustomFieldsSettings.CustomStrings ItemCustomField=@item.CustomStrings />
            <CustomFieldsValueComponent T="string" CustomFields=@item.Collection.CustomFieldsSettings.CustomTexts ItemCustomField=@item.CustomTexts />
            <CustomFieldsValueComponent T="int?" CustomFields=@item.Collection.CustomFieldsSettings.CustomInts ItemCustomField=@item.CustomInts />
            <CustomFieldsValueComponent T="bool" CustomFields=@item.Collection.CustomFieldsSettings.CustomBools ItemCustomField=@item.CustomBools />
            <CustomFieldsValueComponent T="DateTime?" CustomFields=@item.Collection.CustomFieldsSettings.CustomDates ItemCustomField=@item.CustomDates />
        }
    </MudPaper>

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <AuthorizeView>
        <Authorized>
            <MudTooltip>
                <ChildContent>
                    <MudBadge Content="@itemLikes.Count()" Class="mx-6 my-4" Origin=Origin.CenterRight Overlap=true Visible=@(itemLikes.Count() > 0)>
                        <MudIconButton Color="Color.Inherit" OnClick="OnLikeItem">
                            @if (itemLiked)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Favorite" />
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" />
                            }
                        </MudIconButton>
                    </MudBadge>
                </ChildContent>
                <TooltipContent>
                    @foreach (var like in itemLikes)
                    {
                        <MudText Typo="Typo.body2">@GetReactionUserName(like.User)</MudText>
                    }
                </TooltipContent>
            </MudTooltip>
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-4">
                        <MudForm @bind-IsValid="@formIsValid">
                            <MudTextField @bind-Value="commentContent" Label=@locale["Comment"] Required="true" RequiredError=@locale["Comment content is required"] />
                            <MudDivider DividerType="DividerType.Middle" Class="my-2" />
                            <div class="d-flex align-center justify-space-between">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!formIsValid)" Class="ml-auto" OnClick="OnSubmitComment">@locale["Send"]</MudButton>
                            </div>
                        </MudForm>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </Authorized>
        <NotAuthorized>
            <MudTooltip>
                <ChildContent>
                    <MudBadge Content="@itemLikes.Count()" Class="mx-6 my-4" Origin=Origin.CenterRight Overlap=true Visible=@(itemLikes.Count() > 0)>
                        <MudIconButton Color="Color.Inherit" Icon="@Icons.Material.Filled.FavoriteBorder" Disabled />
                    </MudBadge>
                </ChildContent>
                <TooltipContent>
                    @foreach (var like in itemLikes)
                    {
                        <MudText Typo="Typo.body2">@GetReactionUserName(like.User)</MudText>
                    }
                </TooltipContent>
            </MudTooltip>
        </NotAuthorized>
    </AuthorizeView>

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudStack>
        @foreach (var comment in itemComments)
        {
            <MudPaper Class="pa-4">
                <MudStack Row="true">
                    <MudStack Justify="Justify.Center" Spacing="0">
                        <MudText Typo="Typo.subtitle2">@GetReactionUserName(comment.User)</MudText>
                        <MudText Typo="Typo.caption">@comment.AddedDateTime</MudText>
                        <MudDivider />
                        <MudText Typo="Typo.body1">@comment.Content</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        }
    </MudStack>
}

@code {
    [Parameter]
    public int ItemId { get; set; }

    private HubConnection? hubConnection;
    private Item? item;
    private bool canManageCollection, formIsValid, itemLiked;
    private IEnumerable<Comment> itemComments = [];
    private IEnumerable<Like> itemLikes = [];
    private string? commentContent, userId;
    private int timeZoneOffset;

    protected override async Task OnInitializedAsync()
    {
        await InitHubConnection();

        item = await ItemService.GetItemWithCollection(ItemId);
        if (item is null) NavigationManager.NavigateTo(AppRouteNotFound);
        else canManageCollection = await AuthService.IsAllowManageCollection(item.Collection);

        await GetComments();
        await GetLikes();

        timeZoneOffset = await JS.InvokeAsync<int>(JSGetTimeOffsetFuncName);
    }

    private async Task GetComments()
    {
        itemComments = await ReactionsService.GetItemComments(ItemId);
    }

    private async Task GetLikes()
    {
        itemLikes = await ReactionsService.GetItemLikes(ItemId);

        var userId = await AuthService.GetCurrentUserId();
        if (!string.IsNullOrEmpty(userId))
        {
            itemLiked = itemLikes.Any(l => l.User?.Id == userId);
        }
    }

    private void OnDeleteItem()
    {
        var deleteContentText = $"{locale["item"]} {item?.Name}";
        var parameters = new DialogParameters<DeleteDialog>();
        parameters.Add(x => x.ContentText, deleteContentText);
        parameters.Add(x => x.OnDelete, new EventCallbackFactory().Create(this, DeleteItem));

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        DialogService.Show<DeleteDialog>($"{locale["Delete"]} {deleteContentText}", parameters, options);
    }

    private async Task DeleteItem()
    {
        if (await AuthService.IsAllowManageCollection(item.Collection))
        {
            await ItemService.DeleteItem(item);
            NavigationManager.NavigateTo($"/{NavCollections}/{item?.Collection.Id}");
        }
    }

    private async Task OnSubmitComment()
    {
        if(await AuthService.IsUserAuthenticated())
        {
            var userId = await AuthService.GetCurrentUserId();
            if (!string.IsNullOrEmpty(userId))
            {
                var comment = new Comment() { ItemId = ItemId, Content = commentContent, AddedDateTime = DateTime.UtcNow, UserId = userId };
                commentContent = "";
                await ReactionsService.AddComment(comment);
                await SendUpdateComments();
                await GetComments();
            }
        }
    }

    private async Task OnLikeItem()
    {
        if (await AuthService.IsUserAuthenticated())
        {
            var userId = await AuthService.GetCurrentUserId();
            if (!string.IsNullOrEmpty(userId))
            {
                var myLike = await ReactionsService.GetLikeForItemByUser(ItemId, userId);
                if (myLike != null) await ReactionsService.DeleteLike(myLike);
                else
                {
                    var newLike = new Like() { ItemId = ItemId, UserId = userId };
                    await ReactionsService.AddLike(newLike);
                }
                await GetLikes();
            }                
        }
    }

    private string? GetReactionUserName(ApplicationUser? user) => user != null ? user.UserName : locale["deleted user"];

    private string GetLocalTime(DateTime dateTime) => dateTime.Subtract(TimeSpan.FromMinutes(timeZoneOffset)).ToString();

    private void NavigateToEditItem()
    {
        NavigationManager.NavigateTo($"/{NavItems}/{ItemId}/{NavEdit}");
    }

    private string GetTagSearchHref(string tagName)
    {
        return $"/{NavSearch}?{ParameterSearchTag}={tagName}";
    }

    private async Task InitHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(HubName))
            .Build();

        hubConnection.On(HubReceiveCommentsUpdate, async () =>
        {
            await GetComments();
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync(HubJoinGroup, ItemId);
    }

    private async Task SendUpdateComments()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync(HubSendCommentsUpdate, ItemId);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync(HubLeaveGroup, ItemId);
            await hubConnection.DisposeAsync();
        }
    }
}
