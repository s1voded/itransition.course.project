@page "/items/{ItemId:int}"
@using PersonalCollectionWebApp.Components.Shared
@attribute [Authorize(Policy = Constants.PolicyUserNotBlockedOrAnonymous)]
@rendermode InteractiveServer
@inject CollectionService CollectionService
@inject ReactionsService ReactionsService
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject IDialogService DialogService

<PageTitle>@item?.Name</PageTitle>

@if (item != null)
{
    @if (canManageItem)
    {
        <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="NavigateToEditItem">Edit item</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="OnDeleteItem">Delete item</MudButton>
    }

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudPaper Class="pa-4" Elevation="1">
        <MudText>Name: <b>@item.Name</b></MudText>
        <MudText>Added: <b>@item.CreatedDate</b></MudText>
        <MudText>Collection: <b>@item.Collection.Name</b></MudText>
        <MudText>Tags: <b>СДЕЛАТЬ!</b></MudText>
        @for (int i = 0; i < Constants.CustomFieldsCount; i++)
        {
            var index = i;
            @if (item.Collection.CustomFieldsSettings != null && item.Collection.CustomFieldsSettings.CustomStrings[index].Enable)
            {
                <MudText>@item.Collection.CustomFieldsSettings.CustomStrings[index].Name: <b>@item.CustomStrings[index]</b></MudText>
            }
        }
        @for (int i = 0; i < Constants.CustomFieldsCount; i++)
        {
            var index = i;
            @if (item.Collection.CustomFieldsSettings != null && item.Collection.CustomFieldsSettings.CustomTexts[index].Enable)
            {
                <MudText>@item.Collection.CustomFieldsSettings.CustomTexts[index].Name: <b>@item.CustomTexts[index]</b></MudText>
            }
        }
        @for (int i = 0; i < Constants.CustomFieldsCount; i++)
        {
            var index = i;
            @if (item.Collection.CustomFieldsSettings != null && item.Collection.CustomFieldsSettings.CustomInts[index].Enable)
            {
                <MudText>@item.Collection.CustomFieldsSettings.CustomInts[index].Name: <b>@item.CustomInts[index]</b></MudText>
            }
        }
        @for (int i = 0; i < Constants.CustomFieldsCount; i++)
        {
            var index = i;
            @if (item.Collection.CustomFieldsSettings != null && item.Collection.CustomFieldsSettings.CustomBools[index].Enable)
            {
                <MudText>@item.Collection.CustomFieldsSettings.CustomBools[index].Name: <b>@item.CustomBools[index]</b></MudText>
            }
        }
        @for (int i = 0; i < Constants.CustomFieldsCount; i++)
        {
            var index = i;
            @if (item.Collection.CustomFieldsSettings != null && item.Collection.CustomFieldsSettings.CustomDates[index].Enable)
            {
                <MudText>@item.Collection.CustomFieldsSettings.CustomDates[index].Name: <b>@item.CustomDates[index]</b></MudText>
            }
        }
    </MudPaper>

    <MudDivider DividerType="DividerType.Middle" Class="my-2" />

    <MudStack>
        @foreach (var comment in itemComments)
        {
            <MudPaper Class="pa-4">
                <MudStack Row="true">
                    <MudStack Justify="Justify.Center" Spacing="0">
                        <MudText Typo="Typo.subtitle2">@comment.User?.UserName</MudText>
                        <MudText Typo="Typo.caption">@comment.AddedDateTime</MudText>
                        <MudDivider />
                        <MudText Typo="Typo.body1">@comment.Content</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        }
    </MudStack>
}
else
{
    <MudText Align="Align.Center">Item not found.</MudText>
}

@code {
    [Parameter]
    public int ItemId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private Item? item;
    private bool canManageItem;
    private IEnumerable<Comment> itemComments = [];

    protected override async Task OnInitializedAsync()
    {
        item = await CollectionService.GetItemWithCollection(ItemId);
        itemComments = await ReactionsService.GetItemComments(ItemId);

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                var isAuthorized = await AuthorizationService.AuthorizeAsync(user, item?.Collection, Constants.PolicyCanManageCollection);
                canManageItem = isAuthorized.Succeeded;
            }
        }
    }

    private void OnDeleteItem()
    {
        var parameters = new DialogParameters<DeleteDialog>();
        parameters.Add(x => x.ContentText, $"Do you really want to delete item {item?.Name}? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);
        parameters.Add(x => x.OnDelete, new EventCallbackFactory().Create(this, DeleteItem));

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        DialogService.Show<DeleteDialog>($"Delete item {item?.Name}", parameters, options);
    }

    private async Task DeleteItem()
    {
        if(item != null)
        {
            await CollectionService.DeleteItem(item);
        }
        NavigationManager.NavigateTo($"/collections/{item?.Collection.Id}");
    }

    private void NavigateToEditItem()
    {
        NavigationManager.NavigateTo($"/items/{ItemId}/edit");
    }
}
