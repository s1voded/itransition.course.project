@attribute [Route(AppRouteItemEdit)]
@attribute [Authorize(Policy = PolicyUserNotBlocked)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject CollectionService CollectionService
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService

<PageTitle>Edit @item?.Name</PageTitle>

@if (item != null)
{
    if (canManageItem)
    {
        <ItemEditCreateComponent 
            Item="item"
            Tags="tags"
            CustomFieldsSettings="item.Collection.CustomFieldsSettings"
            OnSubmit="UpdateItem"
            SubmitButtonText="Update">
        </ItemEditCreateComponent>
    }
}

@code {
    [Parameter]
    public int ItemId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private Item? item;
    private IEnumerable<Tag> tags;
    private bool canManageItem;

    protected override async Task OnInitializedAsync()
    {
        item = await CollectionService.GetItemWithCollection(ItemId);
        tags = await CollectionService.GetAllItemTags();

        if (item is null) NavigationManager.NavigateTo(AppRouteNotFound);

        await DoActionItem(ActionType.CanManageInit);
    }

    public async Task UpdateItem() => await DoActionItem(ActionType.Update);

    private async Task DoActionItem(ActionType action)
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                var isAuthorized = await AuthorizationService.AuthorizeAsync(user, item?.Collection, PolicyCanManageCollection);
                if (!isAuthorized.Succeeded) NavigateToAccessDenied();

                switch (action)
                {
                    case ActionType.CanManageInit:
                        canManageItem = isAuthorized.Succeeded;
                        break;

                    case ActionType.Update:
                        if (isAuthorized.Succeeded)
                        {
                            await CollectionService.UpdateItem(item);
                            NavigationManager.NavigateTo($"/{NavItems}/{item.Id}");
                        }
                        break;
                }
            }
        }
    }

    private void NavigateToAccessDenied()
    {
        var uri = new Uri(NavigationManager.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var uriEscaped = Uri.EscapeDataString(uri);
        NavigationManager.NavigateTo($"{AppRouteAccessDenied}?ReturnUrl={uriEscaped}",forceLoad: true);
    }
}
