@attribute [Route(AppRouteItemEdit)]
@attribute [Authorize(Policy = PolicyUserNotBlocked)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject ItemService ItemService
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IStringLocalizer<ItemEdit> locale

<PageTitle>@locale["Edit"] @item?.Name</PageTitle>

@if (item != null)
{
    if (canManageCollection)
    {
        <ItemEditCreateComponent 
            Item=@item
            Tags=@tags
            CustomFieldsSettings=@item.Collection.CustomFieldsSettings
            OnSubmit=@OnUpdateItem
            SubmitButtonText=@locale["Update"]>
        </ItemEditCreateComponent>
    }
}

@code {
    [Parameter]
    public int ItemId { get; set; }

    private Item? item;
    private IEnumerable<Tag> tags;
    private bool canManageCollection;

    protected override async Task OnInitializedAsync()
    {
        item = await ItemService.GetItemWithCollection(ItemId);
        tags = await ItemService.GetAllItemTags();

        if (item is null) NavigationManager.NavigateTo(AppRouteNotFound);
        else canManageCollection = await AuthService.IsAllowManageCollection(item.Collection);
    }

    private async Task OnUpdateItem()
    {
        if (await AuthService.IsAllowManageCollection(item.Collection))
        {
            await ItemService.UpdateItem(item);
            NavigationManager.NavigateTo($"/{NavItems}/{item.Id}");
        }
    }

    private void NavigateToAccessDenied()
    {
        var uri = new Uri(NavigationManager.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var uriEscaped = Uri.EscapeDataString(uri);
        NavigationManager.NavigateTo($"{AppRouteAccessDenied}?ReturnUrl={uriEscaped}",forceLoad: true);
    }
}
