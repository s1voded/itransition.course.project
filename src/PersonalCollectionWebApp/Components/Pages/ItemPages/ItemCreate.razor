@page "/collections/{CollectionId:int}/itemcreate"
@attribute [Authorize(Policy = Constants.PolicyUserNotBlocked)]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject CollectionService CollectionService
@inject IAuthorizationService AuthorizationService

<PageTitle>Item create</PageTitle>

@if (!canManageCollection)
{
    <h3>not authorized</h3>
}

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Item" OnValidSubmit="AddItemToCollection" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText id="name" @bind-Value="Item.Name" class="form-control" />
                <ValidationMessage For="() => Item.Name" class="text-danger" />
            </div>
            @if (collection?.CustomFieldsSettings != null && collection.CustomFieldsSettings.CustomDate1Enable)
            {
                <div class="mb-3">
                    <label for="customDate1" class="form-label">@collection.CustomFieldsSettings.CustomDate1Name</label>
                    <InputDate id="customDate1" @bind-Value="Item.CustomDateTime1" class="form-control" />
                    <ValidationMessage For="() => Item.CustomDateTime1" class="text-danger" />
                </div>
            }
            @if (collection?.CustomFieldsSettings != null && collection.CustomFieldsSettings.CustomDate2Enable)
            {
                <div class="mb-3">
                    <label for="customDate2" class="form-label">@collection.CustomFieldsSettings.CustomDate2Name</label>
                    <InputDate id="customDate2" @bind-Value="Item.CustomDateTime2" class="form-control" />
                    <ValidationMessage For="() => Item.CustomDateTime2" class="text-danger" />
                </div>
            }
            @if (collection?.CustomFieldsSettings != null && collection.CustomFieldsSettings.CustomDate3Enable)
            {
                <div class="mb-3">
                    <label for="customDate3" class="form-label">@collection.CustomFieldsSettings.CustomDate3Name</label>
                    <InputDate id="customDate3" @bind-Value="Item.CustomDateTime3" class="form-control" />
                    <ValidationMessage For="() => Item.CustomDateTime3" class="text-danger" />
                </div>
            }
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<MudItem xs="12" sm="6" md="4">
    <MudAutocomplete T="Tag" Label="Tags" @bind-Value="selectedTag" SearchFunc="@TagsSearch" ToStringFunc="@(tag => tag?.Name)" SelectValueOnTab CoerceValue="true"/>
</MudItem>

@if (selectedTag != null)
{
    <MudChip Tag="selectedTag" Color="Color.Default" OnClose="Closed">@selectedTag.Name</MudChip>
}

@code {
    [Parameter]
    public int CollectionId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [SupplyParameterFromForm]
    public Item Item { get; set; } = new();

    private Tag? selectedTag;
    private PersonalCollection? collection;
    private IEnumerable<Tag> tags;
    private bool canManageCollection;

    protected override async Task OnInitializedAsync()
    {
        tags = await CollectionService.GetAllItemTags();
        collection = await CollectionService.GetCollectionById(CollectionId);

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                var isAuthorized = await AuthorizationService.AuthorizeAsync(user, collection, Constants.PolicyCanManageCollection);
                canManageCollection = isAuthorized.Succeeded;
            }
        }
    }

    public async Task AddItemToCollection()
    {
        Item.CollectionId = CollectionId;
        Item.CreatedDate = DateTime.Now;
        await CollectionService.AddItemToCollection(Item);
        NavigationManager.NavigateTo($"/collections/{CollectionId}");
    }

    private async Task<IEnumerable<Tag>> TagsSearch(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return tags;
        return tags.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    @code {
        void Closed(MudChip chip)
        {
            selectedTag = null;
        }
    }
}
