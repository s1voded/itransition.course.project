@attribute [Route(AppRouteItemCreate)]
@attribute [Authorize(Policy = PolicyUserNotBlocked)]
@rendermode @(new InteractiveServerRenderMode(false))
@inject NavigationManager NavigationManager
@inject CollectionService CollectionService
@inject AuthService AuthService
@inject IStringLocalizer<ItemCreate> locale

<PageTitle>@locale["Item create"]</PageTitle>

@if (canManageCollection)
{
    <ItemEditCreateComponent 
        Item=@item
        Tags=@tags
        CustomFieldsSettings=@collection?.CustomFieldsSettings
        OnSubmit=@OnAddItem
        SubmitButtonText=@locale["Create"]>
    </ItemEditCreateComponent>
}


@code {
    [Parameter]
    public int CollectionId { get; set; }

    public Item item = new();
    private Collection? collection;
    private IEnumerable<Tag> tags;
    private bool canManageCollection;

    protected override async Task OnInitializedAsync()
    {
        tags = await CollectionService.GetAllItemTags();
        collection = await CollectionService.GetCollectionById(CollectionId);

        if (collection is null) NavigationManager.NavigateTo(AppRouteNotFound);
        else canManageCollection = await AuthService.IsAllowManageCollection(collection);
    }

    public async Task OnAddItem()
    {
        if (await AuthService.IsAllowManageCollection(collection))
        {
            item.CollectionId = CollectionId;
            item.CreatedDate = DateTime.UtcNow;
            await CollectionService.AddItem(item);
            NavigationManager.NavigateTo($"/{NavCollections}/{CollectionId}");

        }
    }

    private void NavigateToAccessDenied()
    {
        var uri = new Uri(NavigationManager.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var uriEscaped = Uri.EscapeDataString(uri);
        NavigationManager.NavigateTo($"{AppRouteAccessDenied}?ReturnUrl={uriEscaped}", forceLoad: true);
    }
}
