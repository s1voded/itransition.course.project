@attribute [Route(AppRouteItemCreate)]
@attribute [Authorize(Policy = PolicyUserNotBlocked)]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject CollectionService CollectionService
@inject IAuthorizationService AuthorizationService

<PageTitle>Item create</PageTitle>

@if (canManageItem)
{
    <ItemEditCreateComponent Item="item"
                             Tags="tags"
                             CustomFieldsSettings="collection?.CustomFieldsSettings"
                             OnSubmit="AddItem"
                             SubmitButtonText="Create">
    </ItemEditCreateComponent>
}
else
{
    <MudText Align="Align.Center">Not authorized.</MudText>
}


@code {
    [Parameter]
    public int CollectionId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    public Item item = new();
    private Collection? collection;
    private IEnumerable<Tag> tags;
    private bool canManageItem;

    protected override async Task OnInitializedAsync()
    {
        tags = await CollectionService.GetAllItemTags();
        collection = await CollectionService.GetCollectionById(CollectionId);

        await DoActionItem(ActionType.CanManageInit);
    }

    public async Task AddItem() => await DoActionItem(ActionType.Add);

    private async Task DoActionItem(ActionType action)
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                var isAuthorized = await AuthorizationService.AuthorizeAsync(user, collection, PolicyCanManageCollection);
                switch (action)
                {
                    case ActionType.CanManageInit:
                        canManageItem = isAuthorized.Succeeded;
                        break;

                    case ActionType.Add:
                        if (isAuthorized.Succeeded)
                        {
                            item.CollectionId = CollectionId;
                            item.CreatedDate = DateTime.UtcNow;
                            await CollectionService.AddItem(item);
                            NavigationManager.NavigateTo($"/{NavCollections}/{CollectionId}");
                        }
                        break;
                }
            }
        }
    }
}
