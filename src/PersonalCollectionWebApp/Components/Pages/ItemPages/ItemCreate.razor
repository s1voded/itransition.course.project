@page "/collections/{CollectionId:int}/itemcreate"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject CollectionService CollectionService
@inject IAuthorizationService AuthorizationService

<PageTitle>Item create</PageTitle>

@if (!canManageCollection)
{
    <h3>not authorized</h3>
}

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Item" OnValidSubmit="AddItemToCollection" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Item.Name" class="form-control" />
                <ValidationMessage For="() => Item.Name" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int CollectionId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [SupplyParameterFromForm]
    public Item Item { get; set; } = new();

    private string selectedTagName;
    private Tag? selectedTag;
    private PersonalCollection? collection;
    private IEnumerable<Tag> tags;
    private List<string> tagsNames;
    private bool canManageCollection;

    protected override async Task OnInitializedAsync()
    {
        tags = await CollectionService.GetAllItemTags();
        tagsNames = tags.Select(t => t.Name).ToList();
        collection = await CollectionService.GetCollectionById(CollectionId);

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                var isAuthorized = await AuthorizationService.AuthorizeAsync(user, collection, Constants.PolicyCanManageCollection);
                canManageCollection = isAuthorized.Succeeded;
            }
        }
    }

    public async Task AddItemToCollection()
    {
        // var tags = new List<Tag>() { new Tag { Name = "Expensive" } };
        // Item.Tags = tags;
        Item.CollectionId = CollectionId;
        Item.CreatedDate = DateTime.Now;
        await CollectionService.AddItemToCollection(Item);
        NavigationManager.NavigateTo($"/collections/{CollectionId}");
    }
}
