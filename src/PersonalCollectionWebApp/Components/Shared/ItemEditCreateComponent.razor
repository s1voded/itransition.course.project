@using PSC.Blazor.Components.AutoComplete
@using PersonalCollection.Domain
@inject IItemService ItemService
@inject IStringLocalizer<ItemEditCreateComponent> locale

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @bind-IsValid="@formIsValid">
                <MudTextField @bind-Value="Item.Name" Label=@locale["Name"] Required="true" RequiredError=@locale["Name is required"] />
                <MudDivider DividerType="DividerType.Middle" Class="my-2" />
                <Autocomplete SearchMethod="GetTags"
                              @bind-Values="Tags"
                              EnableDropDown="true"
                              MinimumLength="2"
                              AddItemOnEmptyResultMethod="AddTag"
                              placeholder=@locale["Select tags"]>
                    <SelectedTemplate Context="tag">
                        @tag.Name
                    </SelectedTemplate>
                    <HelpTemplate>
                        @locale["Please enter a minimum of 2 characters to perform a search"]
                    </HelpTemplate>
                    <NotFoundTemplate Context="searchText">
                        @locale["Add"] "@searchText" @locale["as a new tag"]
                    </NotFoundTemplate>
                    <ResultTemplate Context="tag">
                        @tag.Name
                    </ResultTemplate>
                </Autocomplete>
                @if (CustomFieldsSettings != null)
                {
                    @for (int i = 0; i < CustomFieldsCount; i++)
                    {
                        var index = i;
                        @if (CustomFieldsSettings.CustomStrings[index].Enable)
                        {
                            <MudTextField @bind-Value="Item.CustomStrings[index]" Label=@CustomFieldsSettings.CustomStrings[index].Name />
                        }
                    }
                    @for (int i = 0; i < CustomFieldsCount; i++)
                    {
                        var index = i;
                        @if (CustomFieldsSettings.CustomTexts[index].Enable)
                        {
                            <MudTextField @bind-Value="Item.CustomTexts[index]" Label=@CustomFieldsSettings.CustomTexts[index].Name AutoGrow MaxLines="3" Lines="3" />
                        }
                    }
                    @for (int i = 0; i < CustomFieldsCount; i++)
                    {
                        var index = i;
                        @if (CustomFieldsSettings.CustomInts[index].Enable)
                        {
                            <MudNumericField @bind-Value="Item.CustomInts[index]" Label=@CustomFieldsSettings.CustomInts[index].Name />
                        }
                    }
                    @for (int i = 0; i < CustomFieldsCount; i++)
                    {
                        var index = i;
                        @if (CustomFieldsSettings.CustomBools[index].Enable)
                        {
                            <MudCheckBox @bind-Value="Item.CustomBools[index]" Label=@CustomFieldsSettings.CustomBools[index].Name />
                        }
                    }
                    @for (int i = 0; i < CustomFieldsCount; i++)
                    {
                        var index = i;
                        @if (CustomFieldsSettings.CustomDates[index].Enable)
                        {
                            <MudDatePicker @bind-Date="Item.CustomDates[index]" Label=@CustomFieldsSettings.CustomDates[index].Name />
                        }
                    }
                }
                <MudDivider DividerType="DividerType.Middle" Class="my-2" />
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!formIsValid)" Class="ml-auto" OnClick="Submit">@SubmitButtonText</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public ItemEditCreateDto Item { get; set; }
    [Parameter] public IList<TagDto> Tags { get; set; }
    [Parameter] public CustomFieldsSettings CustomFieldsSettings { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public string SubmitButtonText { get; set; }

    private bool formIsValid;

    async Task Submit()
    {
        await OnSubmit.InvokeAsync();
    }

    public async Task<IEnumerable<TagDto>> GetTags(string searchText)
    {
        return await ItemService.SearchTag(searchText.ToLower());
    } 

    public async Task<TagDto> AddTag(string searchText)
    {
        return await ItemService.AddNewTag(new TagDto() { Name = searchText });
    }
}
