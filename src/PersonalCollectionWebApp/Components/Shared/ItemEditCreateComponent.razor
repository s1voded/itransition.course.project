@using PSC.Blazor.Components.AutoComplete

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @bind-IsValid="@formIsValid">
                <MudTextField @bind-Value="Item.Name" Label="Name" Required="true" RequiredError="Name is required!" />
                <MudDivider DividerType="DividerType.Middle" Class="my-2" />
                <Autocomplete SearchMethod="GetTagsLocal"
                              @bind-Values="_selectedTags"
                              EnableDropDown="true"
                              MinimumLength="2"
                              AddItemOnEmptyResultMethod="ItemAddedMethod"
                              placeholder="Select tags">
                    <SelectedTemplate Context="tag">
                        @tag.Name
                    </SelectedTemplate>
                    <HelpTemplate>
                        Please enter a minimum of 2 characters to perform a search.
                    </HelpTemplate>
                    <NotFoundTemplate Context="searchText">
                        Add "@searchText" as a new tag
                    </NotFoundTemplate>
                    <ResultTemplate Context="tag">
                        @tag.Name
                    </ResultTemplate>
                </Autocomplete>
                @for (int i = 0; i < Constants.CustomFieldsCount; i++)
                {
                    var index = i;
                    @if (CustomFieldsSettings != null && CustomFieldsSettings.CustomStrings[index].Enable)
                    {
                        <MudTextField @bind-Value="Item.CustomStrings[index]" Label=@CustomFieldsSettings.CustomStrings[index].Name />
                    }
                }
                @for (int i = 0; i < Constants.CustomFieldsCount; i++)
                {
                    var index = i;
                    @if (CustomFieldsSettings != null && CustomFieldsSettings.CustomTexts[index].Enable)
                    {
                        <MudTextField @bind-Value="Item.CustomTexts[index]" Label=@CustomFieldsSettings.CustomTexts[index].Name AutoGrow MaxLines="3" Lines="3" />
                    }
                }
                @for (int i = 0; i < Constants.CustomFieldsCount; i++)
                {
                    var index = i;
                    @if (CustomFieldsSettings != null && CustomFieldsSettings.CustomInts[index].Enable)
                    {
                        <MudNumericField @bind-Value="Item.CustomInts[index]" Label=@CustomFieldsSettings.CustomInts[index].Name />
                    }
                }
                @for (int i = 0; i < Constants.CustomFieldsCount; i++)
                {
                    var index = i;
                    @if (CustomFieldsSettings != null && CustomFieldsSettings.CustomBools[index].Enable)
                    {
                        <MudCheckBox @bind-Value="Item.CustomBools[index]" Label=@CustomFieldsSettings.CustomBools[index].Name />
                    }
                }
                @for (int i = 0; i < Constants.CustomFieldsCount; i++)
                {
                    var index = i;
                    @if (CustomFieldsSettings != null && CustomFieldsSettings.CustomDates[index].Enable)
                    {
                        <MudDatePicker @bind-Date="Item.CustomDates[index]" Label=@CustomFieldsSettings.CustomDates[index].Name />
                    }
                }
                <MudDivider DividerType="DividerType.Middle" Class="my-2" />
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!formIsValid)" Class="ml-auto" OnClick="Submit">@SubmitButtonText</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public Item Item { get; set; }
    [Parameter] public IEnumerable<Tag> Tags { get; set; }
    [Parameter] public CustomFieldsSettings CustomFieldsSettings { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public string SubmitButtonText { get; set; }

    private bool formIsValid;
    private IList<Tag>? _selectedTags;

    protected override void OnInitialized()
    {
        _selectedTags = Item.Tags?.ToList();
    }

    async Task Submit()
    {
        Item.Tags = _selectedTags;
        await OnSubmit.InvokeAsync();
    }

    public async Task<IEnumerable<Tag>> GetTagsLocal(string searchText)
    {
        return await Task.FromResult(Tags.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList());
    } 

    public Task<Tag> ItemAddedMethod(string searchText)
    {
        var newTag = new Tag() { Name = searchText };
        return Task.FromResult(newTag);
    }
}
