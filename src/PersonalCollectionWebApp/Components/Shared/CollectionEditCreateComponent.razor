@using PSC.Blazor.Components.MarkdownEditor
@using PSC.Blazor.Components.MarkdownEditor.EventsArgs
@inject ImageStorageService ImageStorageService

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @bind-IsValid="@formIsValid">
                <MudTextField @bind-Value="Collection.Name" Label="Name" Required="true" RequiredError="Name is required!" />
                <MudSelect @bind-Value="Collection.ThemeId" Label="Theme" AnchorOrigin="Origin.BottomCenter" >
                    @foreach (var theme in Themes)
                    {
                        <MudSelectItem T="int?" Value="@theme.Id">@theme.Name</MudSelectItem>
                    }
                </MudSelect>

                @if (!string.IsNullOrEmpty(Collection.Image))
                {
                    <ImageComponent FileName=@Collection.Image />
                    <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick=OnDeleteImage>Delete</MudButton>
                }
                else
                {
                    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadImage">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" for="@context.Id">Upload Image</MudButton>
                        </ButtonTemplate>
                        <SelectedTemplate>
                            @if (context != null)
                            {
                                <MudText>@context.Name</MudText>
                            }
                            else
                            {
                                <MudText>No File</MudText>
                            }
                        </SelectedTemplate>
                    </MudFileUpload>
                }
               
                <MudDivider DividerType="DividerType.Middle" Class="my-2" />
                <MarkdownEditor @bind-Value="Collection.Description" MaxHeight="150px" />
                <MudExpansionPanels MultiExpansion="true">
                    <CustomFieldsSettingComponent CustomFields=@CustomFieldsSettings.CustomStrings CustomFieldsName="String"/>
                    <CustomFieldsSettingComponent CustomFields=@CustomFieldsSettings.CustomTexts CustomFieldsName="Text" />
                    <CustomFieldsSettingComponent CustomFields=@CustomFieldsSettings.CustomInts CustomFieldsName="Int" />
                    <CustomFieldsSettingComponent CustomFields=@CustomFieldsSettings.CustomBools CustomFieldsName="Bool" />
                    <CustomFieldsSettingComponent CustomFields=@CustomFieldsSettings.CustomDates CustomFieldsName="Date" />
                </MudExpansionPanels>
                <MudDivider DividerType="DividerType.Middle" Class="my-2" />
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!formIsValid)" Class="ml-auto" OnClick="Submit">@SubmitButtonText</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public Collection Collection { get; set; }
    [Parameter] public IEnumerable<Theme> Themes { get; set; }
    [Parameter] public CustomFieldsSettings CustomFieldsSettings { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public string SubmitButtonText { get; set; }

    private bool formIsValid;

    async Task Submit()
    {
        await OnSubmit.InvokeAsync();
    }

    private async Task UploadImage(IBrowserFile file)
    {
        var fileName = $"{Guid.NewGuid()}_{file.Name}";
        await ImageStorageService.UploadAsync(fileName, file.OpenReadStream(2097152));
        Collection.Image = fileName;
    }

    private async Task OnDeleteImage()
    {
        await ImageStorageService.DeleteAsync(Collection.Image);
        Collection.Image = null;
    }
}
