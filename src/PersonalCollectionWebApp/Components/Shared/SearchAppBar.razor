@using PersonalCollectionWebApp.Components.Layout
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IItemService ItemService
@inject IStringLocalizer<MainLayout> locale

@* <div class="input-group" Style="width: 500px;">
    <input @bind="searchString" type="text" class="form-control" placeholder=@locale["Search items"] aria-label="Search items" aria-describedby="button-addon2">
    <button @onclick="NavigateToSearchItems" class="btn btn-outline-secondary" type="button" id="button-addon2">@locale["Search"]</button>
</div> *@

<MudAutocomplete @ref="_autoComplete"
    T="ItemDto"
    Label=@locale["Search items"]
    ToStringFunc="@(i => i?.Name)"
    ValueChanged=NavigateToItemDetails
    SearchFunc="@Search1" 
    Margin=Margin.Dense 
    Dense=true 
    Variant="Variant.Outlined" 
    AdornmentIcon="@Icons.Material.Filled.Search" CoerceText=true CoerceValue=true>
    <ItemTemplate>
        <FoundItemComponent Item="@context"/>
    </ItemTemplate>
    <ItemSelectedTemplate>
        <FoundItemComponent Item="@context" />
    </ItemSelectedTemplate>
</MudAutocomplete>

@code {
    //private string searchString;

    // private void NavigateToSearchItems()
    // {
    //     if (!string.IsNullOrEmpty(searchString))
    //     {
    //         NavigationManager.NavigateTo($"/{NavSearch}?{ParameterSearchString}={searchString}", true);
    //         searchString = "";
    //     }
    // }

    private MudAutocomplete<ItemDto> _autoComplete { get; set; }

    private async Task NavigateToItemDetails(ItemDto item)
    {
        if (item != null)
        {
            await _autoComplete.Clear();
            NavigationManager.NavigateTo($"/{NavItems}/{item.Id}");
        }
    }

    private async Task<IEnumerable<ItemDto>> Search1(string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            return await ItemService.SearchItems(value);
        }

        return [];
    }
}
