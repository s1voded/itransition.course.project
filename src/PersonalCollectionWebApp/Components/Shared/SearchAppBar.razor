@using PersonalCollectionWebApp.Components.Layout
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IItemService ItemService
@inject IStringLocalizer<MainLayout> locale

<div class="input-group" Style="width: 500px;">
    <input @bind="searchString" @bind:event="oninput" @onkeydown="@Enter" type="text" class="form-control" placeholder=@locale["Search items"] aria-label="Search items" aria-describedby="button-addon2">
    <button @onclick="NavigateToSearchItems" class="btn btn-outline-secondary" type="button" id="button-addon2">@locale["Search"]</button>
</div>


@* <MudAutocomplete @ref=autoComplete
                 T="ItemDto"
                 Label=@locale["Search items"]
                 ToStringFunc="@(i => i?.Name)"
                 ValueChanged=NavigateToItemDetails
                 SearchFunc="@SearchItems"
                 Margin=Margin.Dense
                 Dense=true
                 Variant="Variant.Outlined"
                 AdornmentIcon="@Icons.Material.Filled.Search">
    <ItemTemplate>
        <FoundItemComponent Item="@context"/>
    </ItemTemplate>
    <ItemSelectedTemplate>
        <FoundItemComponent Item="@context" />
    </ItemSelectedTemplate>
</MudAutocomplete> *@

@code {
    private string searchString;

    private void NavigateToSearchItems()
    {
        if (!string.IsNullOrEmpty(searchString))
        {
            NavigationManager.NavigateTo($"/{NavSearch}?{ParameterSearchString}={searchString}", true);
            searchString = "";
        }
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            NavigateToSearchItems();
        }
    }

    // private MudAutocomplete<ItemDto> autoComplete;

    // private async Task NavigateToItemDetails(ItemDto item)
    // {
    //     if (item != null)
    //     {
    //         NavigationManager.NavigateTo($"/{NavItems}/{item.Id}");
    //         await autoComplete.Clear();
    //     }
    // }

    // private async Task<IEnumerable<ItemDto>> SearchItems(string value)
    // {
    //     if (!string.IsNullOrEmpty(value))
    //     {
    //         return await ItemService.SearchItems(value);
    //     }

    //     return [];
    // }
}
